#!/usr/bin/env node

const cli = require('../lib/cli');
const fs = require('fs');
const path = require('path');
const boilerplate = require('mip-cli-boilerplate');
const merge = require('deepmerge');

const args = cli.setup({
    noArgs: true,
    options: [
        ['-p, --port <n>', '启动端口号', parseInt],
        ['-f, --force', '强制启动，关闭占用端口的进程'],
        ['-l, --livereload <value>', '启用调试自动刷新']
    ],
    help: [
          '启动MIP调试服务器',
          '    $ mip server',
      ].join('\n')
});

var defaultConfig = require(boilerplate.TEMPLATE_DIR + '/mip.config');
defaultConfig.baseDir = process.cwd();

var configPath = path.join(defaultConfig.baseDir, 'mip.config');
// 加载用户定义配置
if (fs.existsSync(configPath)) {
    defaultConfig = merge(defaultConfig, require(configPath));
    
    // 设置是否extensions目录，用于调试时启用不同的配置
    defaultConfig.isExtensionsDir = defaultConfig.extensionsDir === '.';
}


// cli 配置
if (cli.program.port) {
    defaultConfig.port = cli.program.port;
}

// livereload 配置，默认开启，可设置关闭
if (cli.program.livereload) {
    defaultConfig.livereload = cli.program.livereload !== 'false'
        && cli.program.livereload !== '0';
}

// 强制启动，关闭占用端口的进程
if (cli.program.force) {
    require('../lib/util/kill-process-byport')({
        port: defaultConfig.port
    })
        .then(() => {
            require('../lib/server-start').exec(defaultConfig);
        }, error => {
            cli.error(error);
        });
}
else {
    require('../lib/server-start').exec(defaultConfig);
}

